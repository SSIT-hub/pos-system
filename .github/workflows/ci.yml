name: CI

on:
  push:
    branches:
      - main
      - develop
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - '*.toml'
      - '.github/workflows/cd.yml'
  pull_request:
    branches:
      - main
      - develop
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - '*.toml'
      - '.github/workflows/cd.yml'
  workflow_dispatch:

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install dependencies
        run: npm ci
      - name: Run build
        run: npm run build

  # lint:
  #   name: Lint
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '20'
  #         cache: 'npm'

  #     - name: Install dependencies
  #       run: npm ci

  #     - name: Run lint
  #       run: npm run lint

  # type-check:
  #   name: Type Check
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '20'
  #         cache: 'npm'

  #     - name: Install dependencies
  #       run: npm ci

  #     - name: Run type check
  #       run: npm run type-check

  # test:
  #   name: Test
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '20'
  #         cache: 'npm'

  #     - name: Install dependencies
  #       run: npm ci

  #     - name: Run tests
  #       run: npm run test

  notify:
    name: Send Webhook Notification
    runs-on: ubuntu-latest
    needs: [build]
    if: always()
    steps:
      - name: Send CI notification
        if: always()
        run: |
          STATUS="${{ job.status }}"
          REPO="${{ github.repository }}"
          RUN_ID="${{ github.run_id }}"
          WORKFLOW="${{ github.workflow }}"
          BRANCH="${{ github.ref_name }}"
          COMMIT_SHA="${{ github.sha }}"
          COMMIT_MESSAGE="${{ github.event.head_commit.message }}"
          ACTOR="${{ github.actor }}"
          RUN_URL="https://github.com/$REPO/actions/runs/$RUN_ID"
          
          echo "CI completed for $REPO on branch $BRANCH with status: $STATUS"
          echo "Run URL: $RUN_URL"
          echo "Commit: $COMMIT_SHA"
          echo "Commit Message: $COMMIT_MESSAGE"
          
          # Check webhook configuration - Try both naming conventions
          WEBHOOK_URL="${{ secrets.WEBHOOK_URL }}"
          WEBHOOK_SECRET="${{ secrets.WEBHOOK_SECRET }}"
          
          # Fallback to CI_WEBHOOK_URL if WEBHOOK_URL is not set
          if [ -z "$WEBHOOK_URL" ]; then
            WEBHOOK_URL="${{ secrets.CI_WEBHOOK_URL }}"
          fi
          
          if [ -z "$WEBHOOK_URL" ] || [ -z "$WEBHOOK_SECRET" ]; then
            echo "‚ö†Ô∏è  Webhook not configured"
            echo "üìù To enable webhook notifications, add these to repository secrets:"
            echo "  - WEBHOOK_URL or CI_WEBHOOK_URL (webhook endpoint)"
            echo "  - WEBHOOK_SECRET (webhook secret key)"
            echo ""
            echo "üîç Current secrets status:"
            echo "  WEBHOOK_URL: ${{ secrets.WEBHOOK_URL != '' && 'SET' || 'NOT SET' }}"
            echo "  WEBHOOK_SECRET: ${{ secrets.WEBHOOK_SECRET != '' && 'SET' || 'NOT SET' }}"
            echo "  CI_WEBHOOK_URL: ${{ secrets.CI_WEBHOOK_URL != '' && 'SET' || 'NOT SET' }}"
          else
            echo "üì° Sending webhook notification..."
            echo "üîó Webhook URL: $WEBHOOK_URL"
            
            PAYLOAD='{
              "workflow_name": "'$WORKFLOW'",
              "repository": "'$REPO'",
              "run_id": "'$RUN_ID'",
              "run_url": "'$RUN_URL'",
              "status": "'$STATUS'",
              "branch": "'$BRANCH'",
              "commit_sha": "'$COMMIT_SHA'",
              "commit_message": "'$COMMIT_MESSAGE'",
              "actor": "'$ACTOR'"
            }'

            echo ""
            echo "üìã Webhook payload to be sent:"
            echo "==============================="
            echo "$PAYLOAD" | jq '.' 2>/dev/null || echo "$PAYLOAD"
            echo "==============================="
            echo ""

            # Send webhook with error handling
            WEBHOOK_RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
                 -H "Content-Type: application/json" \
                 -H "X-Webhook-Secret: $WEBHOOK_SECRET" \
                 -d "$PAYLOAD" "$WEBHOOK_URL")
            
            # Extract HTTP status code (last line)
            HTTP_STATUS=$(echo "$WEBHOOK_RESPONSE" | tail -n1)
            RESPONSE_BODY=$(echo "$WEBHOOK_RESPONSE" | head -n -1)
            
            if [ "$HTTP_STATUS" = "200" ]; then
              echo "‚úÖ Webhook notification sent successfully!"
              echo "üìä Response: $RESPONSE_BODY"
            else
              echo "‚ùå Webhook notification failed with status: $HTTP_STATUS"
              echo "üìä Response: $RESPONSE_BODY"
              echo "üîó Webhook URL: $WEBHOOK_URL"
            fi
          fi
