name: CD

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - '*.toml'
      - '.github/workflows/ci.yml'
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  NPM_CACHE_KEY: ${{ runner.os }}-node-${{ env.NODE_VERSION }}-npm-${{ hashFiles('**/package-lock.json') }}

jobs:
  build-and-push-docker:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Main Web App image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/web/main/Dockerfile
          push: true
          tags: your_docker_username/pos-web-main:latest
          cache-from: type=gha,scope=pos-web-main
          cache-to: type=gha,mode=max,scope=pos-web-main

      - name: Build and push Retail Web App image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/web/retail/Dockerfile
          push: true
          tags: your_docker_username/pos-web-retail:latest
          cache-from: type=gha,scope=pos-web-retail
          cache-to: type=gha,mode=max,scope=pos-web-retail

      - name: Build and push Server API image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/server/api/Dockerfile
          push: true
          tags: your_docker_username/pos-server-api:latest
          cache-from: type=gha,scope=pos-server-api
          cache-to: type=gha,mode=max,scope=pos-server-api

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build-and-push-docker
    environment: production
    steps:
      - name: Deploy to Server (Example - SSH)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd /path/to/your/deployment/directory
            docker pull your_docker_username/pos-web-main:latest
            docker pull your_docker_username/pos-web-retail:latest
            docker pull your_docker_username/pos-server-api:latest
            docker-compose up -d --remove-orphans